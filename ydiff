#!/usr/bin/env python3

import sys
import difflib
import signal
signal.signal(signal.SIGPIPE, signal.SIG_DFL)
signal.signal(signal.SIGINT, signal.SIG_DFL)


COLOR_RESET = '\x1b[0m'
COLOR_UNDERLINE = '\x1b[4m'
COLOR_REVERSE = '\x1b[7m'
COLOR_RED = '\x1b[31m'
COLOR_GREEN = '\x1b[32m'
COLOR_YELLOW = '\x1b[33m'
COLOR_BLUE = '\x1b[34m'
COLOR_MAGENTA = '\x1b[35m'
COLOR_CYAN = '\x1b[36m'
COLOR_LIGHTRED = '\x1b[1;31m'
COLOR_LIGHTGREEN = '\x1b[1;32m'
COLOR_LIGHTYELLOW = '\x1b[1;33m'
COLOR_LIGHTBLUE = '\x1b[1;34m'
COLOR_LIGHTMAGENTA = '\x1b[1;35m'
COLOR_LIGHTCYAN = '\x1b[1;36m'


def strsplit(text, width):
    """strsplit() splits a given string into two substrings, \x1b-aware.

    It returns 3-tuple: (first string, second string, number of visible chars
    in the first string).

    If some color was active at the splitting point, then the first string is
    appended with the resetting sequence, and the second string is prefixed
    with all active colors.
    """
    first = ""
    found_colors = ""
    chars_cnt = 0
    append_len = 0

    while text:
        # First of all, check if current string begins with any escape sequence.
        if text[0] == "\x1b":
            color_end = text.find("m")
            if color_end != -1:
                color = text[:color_end+1]
                if color == COLOR_RESET:
                    found_colors = ""
                else:
                    found_colors += color
                append_len = len(color)

        if not append_len:
            # Current string does not start with any escape sequence, so,
            # either add one more visible char to the "first" string, or
            # break if that string is already large enough.
            if chars_cnt >= width:
                break
            chars_cnt += 1
            # would popfront be more efficient here?
            first += text[0]
            text = text[1:]
            continue

        first += text[:append_len]
        text = text[append_len:]
        append_len = 0

    second = text

    # If the first string has some active colors at the splitting point,
    # reset it and append the same colors to the second string.
    if found_colors:
        return first + COLOR_RESET, found_colors + second, chars_cnt

    return first, second, chars_cnt


class Hunk:
    def __init__(self, hunk_headers, hunk_meta, old_addr, new_addr):
        self.hunk_headers = hunk_headers
        self.hunk_meta = hunk_meta
        self._old_addr = old_addr  # tuple (start, offset)
        self._new_addr = new_addr  # tuple (start, offset)
        self._hunk_list = []  # list of tuple (attr, line)

    def append(self, hunk_line):
        """hunk_line is a 2-element tuple: (attr, text), where attr is:
                '-': old, '+': new, ' ': common
        """
        self._hunk_list.append(hunk_line)

    def mdiff(self):
        """The difflib._mdiff() function returns an interator which returns a
        tuple: (from line tuple, to line tuple, boolean flag)

        from/to line tuple -- (line num, line text)
            line num -- integer or None (to indicate a context separation)
            line text -- original line text with following markers inserted:
                '\0+' -- marks start of added text
                '\0-' -- marks start of deleted text
                '\0^' -- marks start of changed text
                '\1' -- marks end of added/deleted/changed text

        boolean flag -- None indicates context separation, True indicates
            either "from" or "to" line contains a change, otherwise False.
        """
        return difflib._mdiff(self._get_old_text(), self._get_new_text())

    def _get_old_text(self):
        return [line for attr, line in self._hunk_list if attr != "+"]

    def _get_new_text(self):
        return [line for attr, line in self._hunk_list if attr != "-"]

    def is_completed(self):
        old_completed = self._old_addr[1] == len(self._get_old_text())
        if not old_completed:
            return False
        # new_completed
        return self._new_addr[1] == len(self._get_new_text())

    def is_empty(self):
        return len(self._hunk_list) == 0


class UnifiedDiff:
    def __init__(self, headers=None, old_path=None, new_path=None, hunks=None):
        self.headers = headers if headers else []
        self.old_path = old_path
        self.new_path = new_path
        self.hunks = hunks if hunks else []

    @staticmethod
    def is_old_path(line):
        return line.startswith("--- ")

    @staticmethod
    def is_new_path(line):
        return line.startswith("+++ ")

    @staticmethod
    def is_hunk_meta(line):
        return (
            line.startswith("@@ -")
            and line.find(" @@") >= 8
        )

    @staticmethod
    def parse_hunk_meta(hunk_meta):
        # @@ -3,7 +3,6 @@
        a = hunk_meta.split()[1].split(",")  # -3 7
        if len(a) > 1:
            old_addr = (int(a[0][1:]), int(a[1]))
        else:
            # @@ -1 +1,2 @@
            old_addr = (int(a[0][1:]), 1)

        b = hunk_meta.split()[2].split(",")  # +3 6
        if len(b) > 1:
            new_addr = (int(b[0][1:]), int(b[1]))
        else:
            # @@ -0,0 +1 @@
            new_addr = (int(b[0][1:]), 1)

        return old_addr, new_addr

    @staticmethod
    def parse_hunk_line(line):
        return line[0], line[1:]

    @classmethod
    def is_old(cls, line):
        return (
            line.startswith("-")
            and not cls.is_old_path(line)
        )

    @classmethod
    def is_new(cls, line):
        return line.startswith("+") and not cls.is_new_path(line)

    @staticmethod
    def is_common(line):
        return line.startswith(" ")

    @staticmethod
    def is_eof(line):
        # \ No newline at end of file
        # \ No newline at end of property
        return line.startswith(r"\ No newline at end of")

    @staticmethod
    def is_only_in_dir(line):
        return line.startswith("Only in ")

    @staticmethod
    def is_binary_differ(line):
        return line.startswith("Binary files") and line.endswith("differ")


def get_diff_generator(stream):
    """parse all diff lines, construct a list of UnifiedDiff objects"""
    diff = UnifiedDiff()
    headers = []

    for line in stream:
        if diff.is_old_path(line):
            # This is a new diff when current hunk is not yet genreated or
            # is completed.  We yield previous diff if exists and construct
            # a new one for this case.  Otherwise it's acutally an 'old'
            # line starts with '--- '.
            if not diff.hunks or diff.hunks[-1].is_completed():
                if diff.old_path and diff.new_path and diff.hunks:
                    yield diff
                diff = UnifiedDiff(headers, line, None, None)
                headers = []
            else:
                diff.hunks[-1].append(diff.parse_hunk_line(line))

        elif diff.is_new_path(line) and diff.old_path:
            if not diff.new_path:
                diff.new_path = line
            else:
                diff.hunks[-1].append(diff.parse_hunk_line(line))

        elif diff.is_hunk_meta(line):
            hunk_meta = line
            old_addr, new_addr = diff.parse_hunk_meta(hunk_meta)
            hunk = Hunk(headers, hunk_meta, old_addr, new_addr)
            headers = []
            diff.hunks.append(hunk)

        elif (
            diff.hunks
            and not headers
            and (diff.is_old(line) or diff.is_new(line) or diff.is_common(line))
        ):
            diff.hunks[-1].append(diff.parse_hunk_line(line))

        elif diff.is_eof(line):
            pass

        elif diff.is_only_in_dir(line) or diff.is_binary_differ(line):
            # 'Only in foo:' and 'Binary files ... differ' are considered
            # as separate diffs, so yield current diff, then this line
            #
            if diff.old_path and diff.new_path and diff.hunks:
                # Current diff is comppletely constructed
                yield diff
            headers.append(line)
            yield UnifiedDiff(headers, None, None, None)
            headers = []
            diff = UnifiedDiff()

        else:
            # All other non-recognized lines are considered as headers or
            # hunk headers respectively
            headers.append(line)

    # Validate and yield the last patch set if it is not yielded yet
    if diff.old_path:
        assert diff.new_path is not None
        if diff.hunks:
            assert not diff.hunks[-1].is_empty()
        yield diff

    if headers:
        # Tolerate dangling headers, just yield a UnifiedDiff object with
        # only header lines
        yield UnifiedDiff(headers, None, None, None)


def markup_traditional(diff):
    """Returns a generator"""
    def _markup_header(line):
        return f"{COLOR_CYAN}{line}{COLOR_RESET}"

    def _markup_path(line):
        return f"{COLOR_YELLOW}{line}{COLOR_RESET}"

    def _markup_hunk_header(line):
        return f"{COLOR_LIGHTCYAN}{line}{COLOR_RESET}"

    def _markup_hunk_meta(line):
        return f"{COLOR_LIGHTBLUE}{line}{COLOR_RESET}"

    def _markup_old(line):
        return f"{COLOR_LIGHTRED}{line}{COLOR_RESET}"

    def _markup_new(line):
        return f"{COLOR_GREEN}{line}{COLOR_RESET}"

    def _markup_mix(line, base_color):
        del_code = COLOR_REVERSE + base_color
        add_code = COLOR_REVERSE + base_color
        chg_code = COLOR_UNDERLINE + base_color
        rst_code = COLOR_RESET + base_color
        line = line.replace('\x00-', del_code)
        line = line.replace('\x00+', add_code)
        line = line.replace('\x00^', chg_code)
        line = line.replace('\x01', rst_code)
        return f"{base_color}{line}{COLOR_RESET}"

    for line in diff.headers:
        yield _markup_header(line)

    yield _markup_path(diff.old_path)
    yield _markup_path(diff.new_path)

    for hunk in diff.hunks:
        for hunk_header in hunk.hunk_headers:
            yield _markup_hunk_header(hunk_header)
        yield _markup_hunk_meta(hunk.hunk_meta)
        for old, new, changed in hunk.mdiff():
            if changed:
                if not old[0]:
                    # The '+' char after \x00 is kept
                    # DEBUG: yield 'NEW: %s %s\n' % (old, new)
                    line = new[1].strip('\x00\x01')
                    yield _markup_new(line)
                elif not new[0]:
                    # The '-' char after \x00 is kept
                    # DEBUG: yield 'OLD: %s %s\n' % (old, new)
                    line = old[1].strip('\x00\x01')
                    yield _markup_old(line)
                else:
                    # DEBUG: yield 'CHG: %s %s\n' % (old, new)
                    yield (_markup_old('-') +
                           _markup_mix(old[1], COLOR_RED))
                    yield (_markup_new('+') +
                           _markup_mix(new[1], COLOR_GREEN))
            else:
                yield ' ' + old[1]


def main():
    for diff in get_diff_generator(sys.stdin):
        for line in markup_traditional(diff):
            sys.stdout.buffer.write(line.encode())


if __name__ == '__main__':
    sys.exit(main())
